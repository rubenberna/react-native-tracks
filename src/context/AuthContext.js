import { AsyncStorage } from "react-native";
import createDataContext from "./createDataContext";
import trackerApi from "../api/tracker";
import { navigate } from "../navigationRef";

const authReducer = (state, action) => {
  switch (action.type) {
    case "add_error":
      return { ...state, errorMessage: action.payload };
    case "login":
      return { errorMessage: "", token: action.payload };
    case "clear_error_message":
      return { ...state, errorMessage: "" };
    case "signout":
      return { token: null, errorMessage: "" };
    default:
      return state;
  }
};

// Sign up
// Outer function for context      //inner function from component
const signup = (dispatch) => async ({ email, password }) => {
  try {
    const res = await trackerApi.post("/signup", { email, password });
    await AsyncStorage.setItem("token", res.data.token);
    dispatch({
      type: "login",
      payload: res.data.token,
    });
    navigate("TrackList"); // clever function to navigate from outside of React files
  } catch (error) {
    dispatch({
      type: "add_error",
      payload: "Something went wrong with sign up", // this could be more user friendly
    });
  }
};

const clearErrorMessage = (dispatch) => () => {
  dispatch({
    type: "clear_error_message",
  });
};

const tryLocalSignin = (dispatch) => async () => {
  const token = await AsyncStorage.getItem("token");
  if (token) {
    dispatch({
      type: "login",
      payload: token,
    });
    navigate("TrackList");
  } else {
    navigate("Signin");
  }
};

// Sign in
const signin = (dispatch) => async ({ email, password }) => {
  try {
    const res = await trackerApi.post("/signin", { email, password });
    await AsyncStorage.setItem("token", res.data.token);
    dispatch({
      type: "login",
      payload: res.data.token,
    });
    navigate("TrackList");
  } catch (error) {
    dispatch({
      type: "add_error",
      payload: "Something went wrong with sign up",
    });
  }
};

// Sign out
const signout = (dispatch) => async () => {
  await AsyncStorage.removeItem("token");
  dispatch({
    type: "logout",
  });
  navigate("loginFlow");
};

// export the provider anc context generated by createDataContext, to which we pass the initial arguments
export const { Provider, Context } = createDataContext(
  authReducer,
  { signin, signup, signout, clearErrorMessage, tryLocalSignin },
  { token: null, errorMessage: "" }
);
